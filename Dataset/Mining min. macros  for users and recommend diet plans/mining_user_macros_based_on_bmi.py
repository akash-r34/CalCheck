# -*- coding: utf-8 -*-
"""Mining_user_macros_based_on_BMI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1US6rpyR00wtOdxEQYsWOPfQ0sgdaLnnq

#Task 1: Generate macros based on BMI for different users

#Step 1: Generating random height and weight for 100 users
This process may generate some abnormal height and weight, which will be removed in the upcoming code blocks.
"""

import random
from random import uniform

height = []
weight = []
bmi = []
for i in range(100):
    h = round(random.uniform(140.0,190.0),2)
    if h >= 140.0 and h <= 150.0:
        bmi.append([h,round(random.uniform(30.0,70.0),2)])
#         height += [h]
#         weight += [round(random.uniform(40.0,70.0),2)]
    elif h >= 150.01 and h <= 170.0:
        bmi.append([h,round(random.uniform(40.01,90.0),2)])
#         height += [h]
#         weight += [round(random.uniform(70.1,140.0),2)]
    elif h >= 170.01 and  h <= 180.0:
        bmi.append([h,round(random.uniform(70.01,100.0),2)])
    else:
        bmi.append([h,round(random.uniform(100.01,110.0),2)])
#     height += [round(random.uniform(120.0,200.0),2)]

"""#Step 2: Calculate BMI with the generated height and weight
Additionaly we also give the BMI range based on the calculated BMI. This is in the form of categorical data with four types - "Underweight", "Normal", "Overweight", "Obesity".
"""

bmi_list = []
for i in bmi:
    data = {}
    data['Height'] = i[0]
    data['Weight'] = i[1]
    data['bmi'] = round((i[1]/(i[0]**2))*10000,2)
    if data['bmi'] < 18.5:
        data["bmi_range"] = "Underweight"
    elif data['bmi'] >= 18.5  and data['bmi'] < 24.9:
        data["bmi_range"] = "Normal"
    elif data['bmi'] >= 24.9 and data['bmi'] < 30.0:
        data['bmi_range'] = "Overweight"
    else:
        data['bmi_range'] = "Obesity"

    bmi_list.append(data)

bmi_list

"""#Step 3: Create a panda dataframe with generated data"""

import pandas as pd

df = pd.DataFrame(bmi_list)
df

"""#Step 4: Calculate minimum Macro intake data for all users
We use a online macro calculator https://www.calculator.net/macro-calculator.html for this task. We mine the website for the minimum macro intake data of different users by giving their height and weight as parameters. We use a python package called BeautifulSoup for accomplishing this task.
"""

import requests
from bs4 import BeautifulSoup

macros_data = []

for height, weight in zip(df['Height'], df['Weight']):
  # Input variables
  #height = 170 # height in cm
  #weight = 70 # weight in kg

  url = "https://www.calculator.net/macro-calculator.html"

  params = {
      "ctype": "metric",
      "cage": 25,
      "csex": "m",
      "cheightmeter": height,
      "ckg": weight,
      "cactivity": 1.375,
      "printit": 0,
      "x": 121,
      "y": 28
  }

  response = requests.get(url, params=params)

  # Create a Beautiful Soup object
  soup = BeautifulSoup(response.content, 'html.parser')

  # Find the recommended daily calorie intake
  macros = dict()

  labels = soup.find_all('td', {'class': 'arrow_box'})
  values = soup.find_all('td', {'class': 'result_box'})
  for label, value in zip(labels, values):
    temp_lab = label.div.text.strip()
    temp_val = value.text.replace('<', '').replace(':', '').strip().split(" ")
    macros[temp_lab+" ("+temp_val[1]+")"] = temp_val[0]
  print(macros)
  macros_data.append(macros)

"""##Create a dataframe from the mined data"""

macros_df = pd.DataFrame(macros_data)
macros_df

"""#Step 5: Merge both the dataframes
We join both the dataframes and drop all the NaN rows.

> Note: We drop all the NaN rows to remove any abnormal height and weight that may have been generated before. 


"""

final_df = df.join(macros_df)
final_df = final_df.dropna()
final_df

"""#Step 6: Export dataset"""

# storing into the excel file
final_df.to_excel("Min_macros_for_height_and_weight.xlsx")

"""#Task 2: Assign dietIDs to user based on their minimum nutrient intake level

#Step 1: Import User macros dataset and diet plan dataset
"""

user_macros_df = pd.read_excel("/content/Min_macros_for_height_and_weight.xlsx")
diet_id_df = pd.read_excel("/content/Food_data_generated_with_dietIDs.xlsx", index_col=0)

diet_id_df

"""##Converting the string string values to integer values"""

user_macros_df = user_macros_df.dropna()
user_macros_df["Food Energy (Calories/day)"] = user_macros_df["Food Energy (Calories/day)"].str.replace(',','')
user_macros_df

"""#Step 2: Aggregate each default diet plans by their macro levels"""

grouped_diet_id = diet_id_df.groupby(by="dietID")
macro_names = ["Protein(g)", "Carbohydrate, by difference(g)", "Total lipid (fat)(g)", "Sugars, total including NLEA(g)", "Energy(kcal)"]
grouped_macros = grouped_diet_id[macro_names].sum()
grouped_macros

"""## Create a heatmap for the aggregated data
Just for better interpretation
"""

import seaborn as sns
sns.heatmap(grouped_macros)

"""## Convert the aggregated data into pandas dataframe"""

macros_dietID_aggr = pd.DataFrame(grouped_macros)
macros_dietID_aggr

"""#Step 3: Assign recommended dietIDs to all the users
If the minimum macro levels intake of the user is less than or equal to a diet plan's macro level, then recommend that plan to the user.
"""

user_diet_recom=[]
user_diet = dict()
for uid, uprotein, ucarbs, ufat, usugar, uenergy in zip(user_macros_df["Unnamed: 0"], user_macros_df["Protein (grams/day)"], user_macros_df["Carbs (grams/day)"], user_macros_df["Fat (grams/day)"], user_macros_df["Sugar (grams/day)"], user_macros_df["Food Energy (Calories/day)"]):
  for id, protein, carbs, fat, sugar, energy in zip(macros_dietID_aggr.index, macros_dietID_aggr["Protein(g)"], macros_dietID_aggr["Carbohydrate, by difference(g)"], macros_dietID_aggr["Total lipid (fat)(g)"], macros_dietID_aggr["Sugars, total including NLEA(g)"], macros_dietID_aggr["Energy(kcal)"]):
    if(float(uprotein)<=float(protein) and float(ucarbs)<=float(carbs) and float(ufat)<=float(fat) and float(usugar)<=float(sugar) and float(uenergy)<=float(energy)):
      user_diet ["UserID"] = "User " + str(uid)
      user_diet ["Protein (grams/day)"] = float(uprotein) 
      user_diet ["Carbs (grams/day)"] = float(ucarbs)
      user_diet ["Fat (grams/day)"] = float(ufat)
      user_diet ["Sugar (grams/day)"] = float(usugar)
      user_diet ["Food Energy (Calories/day)"] = float(uenergy)
      user_diet["Diet Protein(g)"] = float(protein) 
      user_diet["Diet Carbohydrate, by difference(g)"] = float(carbs)
      user_diet["Diet Total lipid (fat)(g)"] = float(fat)
      user_diet["Diet Sugars, total including NLEA(g)"] = float(sugar)
      user_diet["Diet Energy(cal)"] = float(energy)
      user_diet ["DietID"] = id
      user_diet_recom.append(user_diet)
      user_diet = dict()

user_diet_recom_df = pd.DataFrame(user_diet_recom)
user_diet_recom_df

"""#Step 4: Export the resulting dataset"""

user_diet_recom_df.to_excel("Diet_recommendation_based_on_user.xlsx")